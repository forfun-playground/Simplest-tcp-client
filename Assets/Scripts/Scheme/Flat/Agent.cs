// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace forfun.sandbox.uwns.util.pack.flat
{

using global::System;
using global::FlatBuffers;

public struct Agent : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Agent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Uid { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Tid { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public bool Active { get { return 0!=__p.bb.Get(__p.bb_pos + 8); } }
  public Vector Position { get { return (new Vector()).__assign(__p.bb_pos + 12, __p.bb); } }
  public Vector Velocity { get { return (new Vector()).__assign(__p.bb_pos + 20, __p.bb); } }

  public static Offset<Agent> CreateAgent(FlatBufferBuilder builder, int Uid, int Tid, bool Active, float position_X, float position_Y, float velocity_X, float velocity_Y) {
    builder.Prep(4, 28);
    builder.Prep(4, 8);
    builder.PutFloat(velocity_Y);
    builder.PutFloat(velocity_X);
    builder.Prep(4, 8);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    builder.Pad(3);
    builder.PutBool(Active);
    builder.PutInt(Tid);
    builder.PutInt(Uid);
    return new Offset<Agent>(builder.Offset);
  }
};


}
