// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace forfun.sandbox.uwns.util.pack.flat
{

using global::System;
using global::FlatBuffers;

public struct SnapshotResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SnapshotResponse GetRootAsSnapshotResponse(ByteBuffer _bb) { return GetRootAsSnapshotResponse(_bb, new SnapshotResponse()); }
  public static SnapshotResponse GetRootAsSnapshotResponse(ByteBuffer _bb, SnapshotResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SnapshotResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Radius { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Actor? Targets(int j) { int o = __p.__offset(6); return o != 0 ? (Actor?)(new Actor()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int TargetsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Agent? Players(int j) { int o = __p.__offset(8); return o != 0 ? (Agent?)(new Agent()).__assign(__p.__vector(o) + j * 28, __p.bb) : null; }
  public int PlayersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Agent? NonPlayers(int j) { int o = __p.__offset(10); return o != 0 ? (Agent?)(new Agent()).__assign(__p.__vector(o) + j * 28, __p.bb) : null; }
  public int NonPlayersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SnapshotResponse> CreateSnapshotResponse(FlatBufferBuilder builder,
      float radius = 0.0f,
      VectorOffset targetsOffset = default(VectorOffset),
      VectorOffset playersOffset = default(VectorOffset),
      VectorOffset non_playersOffset = default(VectorOffset)) {
    builder.StartObject(4);
    SnapshotResponse.AddNonPlayers(builder, non_playersOffset);
    SnapshotResponse.AddPlayers(builder, playersOffset);
    SnapshotResponse.AddTargets(builder, targetsOffset);
    SnapshotResponse.AddRadius(builder, radius);
    return SnapshotResponse.EndSnapshotResponse(builder);
  }

  public static void StartSnapshotResponse(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(0, radius, 0.0f); }
  public static void AddTargets(FlatBufferBuilder builder, VectorOffset targetsOffset) { builder.AddOffset(1, targetsOffset.Value, 0); }
  public static void StartTargetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static void AddPlayers(FlatBufferBuilder builder, VectorOffset playersOffset) { builder.AddOffset(2, playersOffset.Value, 0); }
  public static void StartPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(28, numElems, 4); }
  public static void AddNonPlayers(FlatBufferBuilder builder, VectorOffset nonPlayersOffset) { builder.AddOffset(3, nonPlayersOffset.Value, 0); }
  public static void StartNonPlayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(28, numElems, 4); }
  public static Offset<SnapshotResponse> EndSnapshotResponse(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SnapshotResponse>(o);
  }
};


}
