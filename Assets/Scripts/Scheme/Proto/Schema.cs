// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;

namespace ForFun.Playground.SimpleTcpClient.Scheme.Proto {

  /// <summary>Holder for reflection information generated from schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8itAEKB01lc3NhZ2USMwoUZW50ZXJfd29ybGRfcmVz",
            "cG9uc2UYaSABKAsyEy5FbnRlcldvcmxkUmVzcG9uc2VIABI5Chd0YXJnZXRf",
            "cG9zaXRpb25fcmVxdWVzdBhuIAEoCzIWLlRhcmdldFBvc2l0aW9uUmVxdWVz",
            "dEgAEi4KEXNuYXBzaG90X3Jlc3BvbnNlGHMgASgLMhEuU25hcHNob3RSZXNw",
            "b25zZUgAQgkKB3JlcXVlc3QiHgoGVmVjdG9yEgkKAXgYAiABKAISCQoBeRgD",
            "IAEoAiI/CgVBY3RvchILCgN1aWQYASABKAUSDgoGYWN0aXZlGAIgASgIEhkK",
            "CHBvc2l0aW9uGAMgASgLMgcuVmVjdG9yIm0KBUFnZW50EgsKA3VpZBgBIAEo",
            "BRIRCgl0YXJnZXRfaWQYAiABKAUSDgoGYWN0aXZlGAMgASgIEhkKCHBvc2l0",
            "aW9uGAQgASgLMgcuVmVjdG9yEhkKCHZlbG9jaXR5GAUgASgLMgcuVmVjdG9y",
            "IiEKEkVudGVyV29ybGRSZXNwb25zZRILCgN1aWQYASABKAUiMgoVVGFyZ2V0",
            "UG9zaXRpb25SZXF1ZXN0EhkKCHBvc2l0aW9uGAEgASgLMgcuVmVjdG9yInEK",
            "EFNuYXBzaG90UmVzcG9uc2USDgoGcmFkaXVzGAEgASgCEhcKB3RhcmdldHMY",
            "AiADKAsyBi5BY3RvchIXCgdwbGF5ZXJzGAMgAygLMgYuQWdlbnQSGwoLbm9u",
            "X3BsYXllcnMYBCADKAsyBi5BZ2VudEJTCh5mb3JmdW4uc2FuZGJveC51d25z",
            "LnBhY2sucHJvdG9CBlBhY2tldFABqgImRm9yZnVuLlNhbmRib3guVXducy5D",
            "bGllbnQuU2hlbWUuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Message), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Message.Parser, new[]{ "EnterWorldResponse", "TargetPositionRequest", "SnapshotResponse" }, new[]{ "Request" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor.Parser, new[]{ "Uid", "Active", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent.Parser, new[]{ "Uid", "TargetId", "Active", "Position", "Velocity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest.Parser, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse), global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse.Parser, new[]{ "Radius", "Targets", "Players", "NonPlayers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.EnterWorldResponse:
          EnterWorldResponse = other.EnterWorldResponse.Clone();
          break;
        case RequestOneofCase.TargetPositionRequest:
          TargetPositionRequest = other.TargetPositionRequest.Clone();
          break;
        case RequestOneofCase.SnapshotResponse:
          SnapshotResponse = other.SnapshotResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "enter_world_response" field.</summary>
    public const int EnterWorldResponseFieldNumber = 105;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse EnterWorldResponse {
      get { return requestCase_ == RequestOneofCase.EnterWorldResponse ? (global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.EnterWorldResponse;
      }
    }

    /// <summary>Field number for the "target_position_request" field.</summary>
    public const int TargetPositionRequestFieldNumber = 110;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest TargetPositionRequest {
      get { return requestCase_ == RequestOneofCase.TargetPositionRequest ? (global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TargetPositionRequest;
      }
    }

    /// <summary>Field number for the "snapshot_response" field.</summary>
    public const int SnapshotResponseFieldNumber = 115;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse SnapshotResponse {
      get { return requestCase_ == RequestOneofCase.SnapshotResponse ? (global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SnapshotResponse;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      EnterWorldResponse = 105,
      TargetPositionRequest = 110,
      SnapshotResponse = 115,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EnterWorldResponse, other.EnterWorldResponse)) return false;
      if (!object.Equals(TargetPositionRequest, other.TargetPositionRequest)) return false;
      if (!object.Equals(SnapshotResponse, other.SnapshotResponse)) return false;
      if (RequestCase != other.RequestCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.EnterWorldResponse) hash ^= EnterWorldResponse.GetHashCode();
      if (requestCase_ == RequestOneofCase.TargetPositionRequest) hash ^= TargetPositionRequest.GetHashCode();
      if (requestCase_ == RequestOneofCase.SnapshotResponse) hash ^= SnapshotResponse.GetHashCode();
      hash ^= (int) requestCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.EnterWorldResponse) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(EnterWorldResponse);
      }
      if (requestCase_ == RequestOneofCase.TargetPositionRequest) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(TargetPositionRequest);
      }
      if (requestCase_ == RequestOneofCase.SnapshotResponse) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(SnapshotResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.EnterWorldResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnterWorldResponse);
      }
      if (requestCase_ == RequestOneofCase.TargetPositionRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetPositionRequest);
      }
      if (requestCase_ == RequestOneofCase.SnapshotResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SnapshotResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.EnterWorldResponse:
          EnterWorldResponse = other.EnterWorldResponse;
          break;
        case RequestOneofCase.TargetPositionRequest:
          TargetPositionRequest = other.TargetPositionRequest;
          break;
        case RequestOneofCase.SnapshotResponse:
          SnapshotResponse = other.SnapshotResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 842: {
            global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse subBuilder = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.EnterWorldResponse();
            if (requestCase_ == RequestOneofCase.EnterWorldResponse) {
              subBuilder.MergeFrom(EnterWorldResponse);
            }
            input.ReadMessage(subBuilder);
            EnterWorldResponse = subBuilder;
            break;
          }
          case 882: {
            global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest subBuilder = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.TargetPositionRequest();
            if (requestCase_ == RequestOneofCase.TargetPositionRequest) {
              subBuilder.MergeFrom(TargetPositionRequest);
            }
            input.ReadMessage(subBuilder);
            TargetPositionRequest = subBuilder;
            break;
          }
          case 922: {
            global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse subBuilder = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SnapshotResponse();
            if (requestCase_ == RequestOneofCase.SnapshotResponse) {
              subBuilder.MergeFrom(SnapshotResponse);
            }
            input.ReadMessage(subBuilder);
            SnapshotResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector : pb::IMessage<Vector> {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Actor : pb::IMessage<Actor> {
    private static readonly pb::MessageParser<Actor> _parser = new pb::MessageParser<Actor>(() => new Actor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Actor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor(Actor other) : this() {
      uid_ = other.uid_;
      active_ = other.active_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Actor Clone() {
      return new Actor(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 2;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Actor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Actor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Active != other.Active) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Active != false) {
        output.WriteRawTag(16);
        output.WriteBool(Active);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Actor other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Active = input.ReadBool();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Agent : pb::IMessage<Agent> {
    private static readonly pb::MessageParser<Agent> _parser = new pb::MessageParser<Agent>(() => new Agent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Agent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Agent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Agent(Agent other) : this() {
      uid_ = other.uid_;
      targetId_ = other.targetId_;
      active_ = other.active_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Agent Clone() {
      return new Agent(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Agent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Agent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (TargetId != other.TargetId) return false;
      if (Active != other.Active) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetId);
      }
      if (Active != false) {
        output.WriteRawTag(24);
        output.WriteBool(Active);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Agent other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
        }
        Velocity.MergeFrom(other.Velocity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadInt32();
            break;
          }
          case 24: {
            Active = input.ReadBool();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (velocity_ == null) {
              velocity_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
            }
            input.ReadMessage(velocity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterWorldResponse : pb::IMessage<EnterWorldResponse> {
    private static readonly pb::MessageParser<EnterWorldResponse> _parser = new pb::MessageParser<EnterWorldResponse>(() => new EnterWorldResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterWorldResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterWorldResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterWorldResponse(EnterWorldResponse other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterWorldResponse Clone() {
      return new EnterWorldResponse(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterWorldResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterWorldResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterWorldResponse other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TargetPositionRequest : pb::IMessage<TargetPositionRequest> {
    private static readonly pb::MessageParser<TargetPositionRequest> _parser = new pb::MessageParser<TargetPositionRequest>(() => new TargetPositionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetPositionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetPositionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetPositionRequest(TargetPositionRequest other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetPositionRequest Clone() {
      return new TargetPositionRequest(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetPositionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetPositionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetPositionRequest other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Vector();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapshotResponse : pb::IMessage<SnapshotResponse> {
    private static readonly pb::MessageParser<SnapshotResponse> _parser = new pb::MessageParser<SnapshotResponse>(() => new SnapshotResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.SchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse(SnapshotResponse other) : this() {
      radius_ = other.radius_;
      targets_ = other.targets_.Clone();
      players_ = other.players_.Clone();
      nonPlayers_ = other.nonPlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse Clone() {
      return new SnapshotResponse(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor.Parser);
    private readonly pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor> targets_ = new pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Actor> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent.Parser);
    private readonly pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> players_ = new pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "non_players" field.</summary>
    public const int NonPlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> _repeated_nonPlayers_codec
        = pb::FieldCodec.ForMessage(34, global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent.Parser);
    private readonly pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> nonPlayers_ = new pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ForFun.Playground.SimpleTcpClient.Scheme.Proto.Agent> NonPlayers {
      get { return nonPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!nonPlayers_.Equals(other.nonPlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      hash ^= targets_.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= nonPlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Radius);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      players_.WriteTo(output, _repeated_players_codec);
      nonPlayers_.WriteTo(output, _repeated_nonPlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0F) {
        size += 1 + 4;
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      size += players_.CalculateSize(_repeated_players_codec);
      size += nonPlayers_.CalculateSize(_repeated_nonPlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      targets_.Add(other.targets_);
      players_.Add(other.players_);
      nonPlayers_.Add(other.nonPlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Radius = input.ReadFloat();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 34: {
            nonPlayers_.AddEntriesFrom(input, _repeated_nonPlayers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
